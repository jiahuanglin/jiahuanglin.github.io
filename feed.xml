<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jiahuanglin.xyz/</id><title>Jacob Lin</title><subtitle>Jacob's writing place</subtitle> <updated>2022-07-14T22:02:50-04:00</updated> <author> <name>Jiahuang(Jacob) Lin</name> <uri>https://jiahuanglin.xyz/</uri> </author><link rel="self" type="application/atom+xml" href="https://jiahuanglin.xyz/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://jiahuanglin.xyz/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Jiahuang(Jacob) Lin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>React, redux and hooks</title><link href="https://jiahuanglin.xyz/posts/react-redux-and-hooks/" rel="alternate" type="text/html" title="React, redux and hooks" /><published>2022-07-09T15:58:00-04:00</published> <updated>2022-07-11T00:55:23-04:00</updated> <id>https://jiahuanglin.xyz/posts/react-redux-and-hooks/</id> <content src="https://jiahuanglin.xyz/posts/react-redux-and-hooks/" /> <author> <name>{"name"=>"Jacob Lin", "link"=>"https://github.com/jiahuanglin"}</name> </author> <category term="Software" /> <summary> React &amp;amp; React hooks Class Component vs Functional Component The following is an example of writing a class component in React: class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } The React team hopes that components don’t become complex containers but preferably just pipelines for data flow. The best way to write components... </summary> </entry> <entry><title>Implementing a simple RPC framework</title><link href="https://jiahuanglin.xyz/posts/implementing-a-simple-rpc-framework/" rel="alternate" type="text/html" title="Implementing a simple RPC framework" /><published>2022-06-28T17:11:00-04:00</published> <updated>2022-06-28T17:11:00-04:00</updated> <id>https://jiahuanglin.xyz/posts/implementing-a-simple-rpc-framework/</id> <content src="https://jiahuanglin.xyz/posts/implementing-a-simple-rpc-framework/" /> <author> <name>{"name"=>"Jacob Lin", "link"=>"https://github.com/jiahuanglin"}</name> </author> <category term="Software" /> <summary> gRPC Example syntax = "proto3"; option java_multiple_files = true; option java_package = "io.grpc.hello"; option java_outer_classname = "HelloProto"; option objc_class_prefix = "HLW"; package hello; service HelloService{ rpc Say(HelloRequest) returns (HelloReply) {} } message HelloRequest { string name = 1; } message HelloReply { string message = 1; } Client.java package io.grpc.he... </summary> </entry> <entry><title>Faster database queries</title><link href="https://jiahuanglin.xyz/posts/faster-database-queries/" rel="alternate" type="text/html" title="Faster database queries" /><published>2022-06-17T11:23:00-04:00</published> <updated>2022-06-26T01:25:43-04:00</updated> <id>https://jiahuanglin.xyz/posts/faster-database-queries/</id> <content src="https://jiahuanglin.xyz/posts/faster-database-queries/" /> <author> <name>{"name"=>"Jacob Lin", "link"=>"https://github.com/jiahuanglin"}</name> </author> <category term="System" /> <summary> Cache Most production systems use the classic combination of MySQL and Redis. Redis acts as a front-end cache for MySQL, blocking most of the query requests for MySQL and essentially relieving the pressure on MySQL’s concurrent requests. Redis is a high-performance KV database that uses memory to store data, and its high performance comes from its simple data structure and use of memory to sto... </summary> </entry> <entry><title>Code refactoring</title><link href="https://jiahuanglin.xyz/posts/code-refactoring/" rel="alternate" type="text/html" title="Code refactoring" /><published>2022-06-05T11:23:00-04:00</published> <updated>2022-06-05T11:23:00-04:00</updated> <id>https://jiahuanglin.xyz/posts/code-refactoring/</id> <content src="https://jiahuanglin.xyz/posts/code-refactoring/" /> <author> <name>{"name"=>"Jacob Lin", "link"=>"https://github.com/jiahuanglin"}</name> </author> <category term="Software" /> <summary> Refactoring is the improvement of the internal structure of software without changing its observable behavior. When to refactor When adding new features The most common time to refactor is when I want to add a new feature to the software. At this point, the immediate reason for refactoring is often to help me understand the code that needs to be changed - code that may have been written ... </summary> </entry> <entry><title>How to design a distributed cache system?</title><link href="https://jiahuanglin.xyz/posts/how-to-design-a-cache-system/" rel="alternate" type="text/html" title="How to design a distributed cache system?" /><published>2022-05-26T02:45:00-04:00</published> <updated>2022-05-26T02:45:00-04:00</updated> <id>https://jiahuanglin.xyz/posts/how-to-design-a-cache-system/</id> <content src="https://jiahuanglin.xyz/posts/how-to-design-a-cache-system/" /> <author> <name>{"name"=>"Jacob Lin", "link"=>"https://github.com/jiahuanglin"}</name> </author> <category term="System" /> <summary> The following are my notes from reading G.K’s system design book How to design a caching system? The caching system is a widely used technology in almost all applications today. In addition, it applies to every layer of the technology stack. For example, DNS lookups heavily utilize caching. In short, a caching system (possibly in memory) stores commonly used resources so that the next re... </summary> </entry> </feed>
